Question (from LeetCode):

Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Note:
1. The return format is zero-based indices.
2. The vector is not ordered.
3. The vector may contain negative and repeated numbers.

Solution 1:
    vector<int> twoSum(vector<int>&amp; nums, int target) {
        vector<int> result;
        for (int i = 0; i &lt; nums.size()-1; i++) {
            for (int j = i+1; j &lt; nums.size(); j++){
                if (nums.at(i)+ nums.at(j) == target){
                    result.push_back(i);
                    result.push_back(j);
                    return result;
                }
            }
        }
        return result;
    }

Solution 2:
    vector<int> twoSum(vector<int>&amp; nums, int target) {
        vector<int> result;
        multimap <int int=""> mymap;
        mymap.clear();
        for (int i = 0; i &lt; nums.size(); i++){
            mymap.insert(pair<int int="">(nums[i], i));   //map <nums i="" index="">
        }
        for (int i = 0; i &lt; nums.size(); i++){
            //target = target-nums[i] + num[i];
            if (mymap.find(target-nums[i]) != mymap.end()){
                if (mymap.find(nums[i]) != mymap.find(target-nums[i])){
                    result.push_back(i);
                    multimap <int int="">::iterator it;
                    it = mymap.find(target-nums[i]);
                    result.push_back(it-&gt;second);
                    return result;
                }
                else if (mymap.count(target-nums[i])&gt;1){
                    multimap<int int="">::iterator it;
                    it=mymap.equal_range(target-nums[i]).first;
                    it++;
                    result.push_back(i);
                    result.push_back((*it).second);
                    return result;
                }
            }
        }
        return result;
    }